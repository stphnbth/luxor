using System.Reflection;
using System.Text;

namespace Extensions
{
    public static class Extension
    {
        // TODO: update to filter ASCII only whitespaces
        private static byte[] _charInfo = {
        //  0     1     2     3     4     5     6     7     8     9     A     B     C     D     E     F
            0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x8E, 0x8E, 0x8E, 0x8E, 0x8E, 0x0E, 0x0E, // U+0000..U+000F
            0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, // U+0010..U+001F
            0x8B, 0x18, 0x18, 0x18, 0x1A, 0x18, 0x18, 0x18, 0x14, 0x15, 0x18, 0x19, 0x18, 0x13, 0x18, 0x18, // U+0020..U+002F
            0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x18, 0x18, 0x19, 0x19, 0x19, 0x18, // U+0030..U+003F
            0x18, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, // U+0040..U+004F
            0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x14, 0x18, 0x15, 0x1B, 0x12, // U+0050..U+005F
            0x1B, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, // U+0060..U+006F
            0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x14, 0x19, 0x15, 0x19, 0x0E, // U+0070..U+007F
            0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x8E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, // U+0080..U+008F
            0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, // U+0090..U+009F
            0x8B, 0x18, 0x1A, 0x1A, 0x1A, 0x1A, 0x1C, 0x18, 0x1B, 0x1C, 0x04, 0x16, 0x19, 0x0F, 0x1C, 0x1B, // U+00A0..U+00AF
            0x1C, 0x19, 0x0A, 0x0A, 0x1B, 0x21, 0x18, 0x18, 0x1B, 0x0A, 0x04, 0x17, 0x0A, 0x0A, 0x0A, 0x18, // U+00B0..U+00BF
            0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, // U+00C0..U+00CF
            0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x19, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x21, // U+00D0..U+00DF
            0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, // U+00E0..U+00EF
            0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x19, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, // U+00F0..U+00FF
        };

        public static char[] ExposeCharBuffer(this StreamReader sr, int size)
        {
            Type stream = sr.GetType();

            FieldInfo? buffer = stream.GetField("_charBuffer", BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance);
            FieldInfo? index = stream.GetField("_charPos", BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance);

            if (buffer is not null && index is not null)
            {
                char[] charBuffer = (char[]) buffer.GetValue(sr)!;   
                int low = (int) index.GetValue(sr)! - 1;

                return charBuffer.Slice(low, low + size);
            }

            return new char[0];
        }

        // slices char array (include, exclude)
        public static char[] Slice(this char[] buffer, int low, int high)
        {
            int length = high - low;

            if (length < 0)
                return new char[0];
            
            char[] result = new char[length];

            for (int i = 0; i < length ; i++)
                result[i] =  buffer[i + low];

            return result;
        }

        public static byte[] ExposeByteBuffer(this StreamReader sr)
        {
            Type stream = sr.GetType();

            FieldInfo? buffer = stream.GetField("_byteBuffer", BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance);
            
            if (buffer is not null) 
            { 
                byte[] byteBuffer = (byte[]) buffer.GetValue(sr); 
                return byteBuffer;
            }

            return new byte[0];
        }

        public static bool IsAsciiWhiteSpace(this char c)
        {
            if (c > 0x00FF) { return false; }
            
            if ((_charInfo[c] & 0x80) != 0) { return true; }

            return false;
        }   
    }
}